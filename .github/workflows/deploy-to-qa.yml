name: Deploy to QA

on:
  push:
    branches: master 

jobs:
  deploy_to_QA_checker:
    name: Deploy to QA checker
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - name: Code checkout
      uses: actions/checkout@v2

    - name: Setup Node environment
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: NPM install
      run: |
        npm i

    - name: Code review  
      run: |
        npm run eslint

    - name: Running unit tests  
      run: |
        npm test    

    - name: Running integration tests  
      run: |
        npm run it    
      env:
        PORT: 8080

  deploy_to_QA:
    name: Upload to AWS QA enviroment
    runs-on: ubuntu-latest
    needs: [deploy_to_QA_checker]

    steps:
    - name: Code checkout
      uses: actions/checkout@v2
          
    - name: Upload app images to the registry
      uses: mr-smithers-excellent/docker-build-push@v2
      with:
        image: jmgorduez/product-gallery-manager
        tag: ${{ github.sha }}
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Deploy app to AWS
      uses: appleboy/ssh-action@master
      env: 
        TAG: ${{ github.sha }}
      with:
        host: ec2-3-22-170-115.us-east-2.compute.amazonaws.com
        username: ${{ secrets.AWS_USER_QA }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        port: 22
        envs: TAG
        script: | 
          docker rm -f -v product-gallery-manager
          docker rmi -f $(sudo docker images 'jmgorduez/product-gallery-manager' -q)
          docker run -d -p 8080:8080 --network product-gallery-network -e PORT=8080 -e STAR_WARS_REST_API_URL='https://swdestinydb.com/api/public/' --name product-gallery-manager "jmgorduez/product-gallery-manager:${TAG}"

    - name: Slack Notification
      uses: sonots/slack-notice-action@v3
      with:
        status: ${{ job.status }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: always() 
