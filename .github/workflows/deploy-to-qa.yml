
name: Deploy to QA

on:
  push:
    branches: master

jobs:
  deploy_to_QA_checker:
    name: Deploy to QA checker
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - name: Code checkout
      uses: actions/checkout@v2

    - name: Setup Node environment
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: NPM ci
      run: |
        npm ci

    - name: NPM build  
      run: |
        npm run build --if-present

    - name: Code review  
      run: |
        npm run eslint-src
        npm run eslint-tests  

    - name: Running unit tests  
      run: |
        npm test    

    - name: Running integration tests  
      run: |
        npm run it    
      env:
        PRODUCT_GALLERY_DB_URL: ${{ secrets.PRODUCT_GALLERY_DB_URL_IT }}

  deploy:
    name: Upload to AWS QA enviroment
    runs-on: ubuntu-latest
    needs: [deploy_to_QA_checker]

    steps:
    - name: Code checkout
      uses: actions/checkout@v2

    - name: Copy mongo scripts for update
      uses: garygrossgarten/github-action-scp@release
      with:
        local: database-update/
        remote: database-update/
        host: ${{ secrets.AWS_SERVER_QA }}
        username: ${{ secrets.AWS_USER_QA }}
        privateKey: ${{ secrets.EC2 }}

    - name: Run database update scripts
      uses: appleboy/ssh-action@master
      env: 
        PRODUCT_GALLERY_DB_URL: ${{ secrets.PRODUCT_GALLERY_DB_URL_IT }}
      with:
        host: ${{ secrets.AWS_SERVER_QA }}
        username: ${{ secrets.AWS_USER_QA }}
        key: ${{ secrets.EC2 }}
        port: 22
        envs: PRODUCT_GALLERY_DB_URL
        script: | 
          mongo ${PRODUCT_GALLERY_DB_URL} database-update/schema.js
          mongo ${PRODUCT_GALLERY_DB_URL} database-update/data.js
          
    - name: Upload app images to the registry
      uses: mr-smithers-excellent/docker-build-push@v2
      with:
        image: jmgorduez/product-gallery-manager
        tag: ${{ github.sha }}
        registry: docker.io
        dockerfile: deploy-app-Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Deploy app to AWS
      uses: appleboy/ssh-action@master
      env: 
        TAG: ${{ github.sha }}
        PRODUCT_GALLERY_DB_URL: ${{ secrets.PRODUCT_GALLERY_DB_URL }}
      with:
        host: ${{ secrets.AWS_SERVER_QA }}
        username: ${{ secrets.AWS_USER_QA }}
        key: ${{ secrets.EC2 }}
        port: 22
        envs: TAG,PRODUCT_GALLERY_DB_URL
        script: | 
          docker rm -f -v product-gallery-manager
          docker rmi -f $(sudo docker images 'jmgorduez/product-gallery-manager' -q)
          docker run -d -p 8080:8080 --network product-gallery-network -e PRODUCT_GALLERY_DB_URL=${PRODUCT_GALLERY_DB_URL} --name product-gallery-manager "jmgorduez/product-gallery-manager:${TAG}"
      
    - name: Slack Notification
      uses: sonots/slack-notice-action@v3
      with:AWS0.
        status: ${{ job.status }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: always() 